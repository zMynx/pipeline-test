# [Lior Dux] ==================== [ GitHub Actions - Manual Build Promotion ] ====================  [22-02-2023] #
#
# Purpose:
# Manually promote builds from dev to production.
#
# How:
# Manually trigger will ask the operator for to select a repo, enter the build number (optional - defaults to latest) to promote, and the SemVer tag for current release.
# Workflow will initiate to:
# - pull that image
# - re-tag according to production semantics
# - push to the relevant production repo
# - notify slack channel about new version in production
#
# Security:
# Using OpenID Connect to allow github actions to assume role in AWS.
# 2 Roles have been created:
# 1) development with pull only access to dev ECRs.
# 2) production with push only access to prod ECRs.
#
#
# Maintainer Notes:
# 1. Use quality actions only.
# 2. Prefer using actions to code.
# 3. Decoupling make jobs more versitile and dynamic, therefor it's a prefered method.
#
name: Promotion
on:
  workflow_dispatch:
    # Reguired inputs
    inputs:
      Repo:
        description: "Select repositry:"
        required: true
        type: choice
        options:
        - gec
        - translation
        - translate_fastapi
      Build:
        description: "Enter build number to promote:"
        required: false
        type: string
        default: latest
      Major:
        required: true
        type: string
        default: 0
      Minor:
        required: true
        type: string
        default: 1
      Patch:
        required: true
        type: string

    # Required secrets
    secrets:
      AWS_ASSUME_ROLE:
        required: true
      AWS_REGION:
        required: true
      ECR_REGISTRY:
        required: false

env:
  RELEASE: ${{ inputs.Major }}.${{ inputs.Minor }}.${{ inputs.Patch }}

jobs:
  Promote:
    runs-on: ubuntu-latest
    environment: 'testing'

    # Map the job outputs to step outputs
    outputs:
      version: ${{ steps.version.outputs.version}}
    permissions:
      id-token: write
      contents: read

    steps:

      - name: Configure AWS credentials (Development)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          role-session-name: GitHub-Actions-OIDC-DEV
          role-duration-seconds: 3600
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr-dev
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to ECR (docker)
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REGISTRY }}/dev.${{ inputs.Repo }}

      - name: Pull build from development repositry
        run: |
          docker pull ${{ secrets.ECR_REGISTRY }}/dev.${{ inputs.Repo }}:${{ inputs.Build }}

      - name: Promote (Re-tag) image to production
        run: |
          docker tag ${{ secrets.ECR_REGISTRY }}/dev.${{ inputs.Repo }}:${{ inputs.Build }} ${{ secrets.ECR_REGISTRY }}/prod.${{ inputs.Repo }}:$RELEASE
          docker tag ${{ secrets.ECR_REGISTRY }}/prod.${{ inputs.Repo }}:$RELEASE ${{ secrets.ECR_REGISTRY }}/prod.${{ inputs.Repo }}:latest

      - name: Configure AWS credentials (Production)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_PRODUCTION }}
          role-session-name: GitHub-Actions-OIDC-PRODUCTION
          role-duration-seconds: 3600
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to ECR (docker)
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REGISTRY }}/prod.${{ inputs.Repo }}

      - name: Push to production repositry
        run: |
          docker image push --all-tags ${{ secrets.ECR_REGISTRY }}/prod.${{ inputs.Repo }}

  slackNotification:
    needs: [Promote]
    if: always()
    runs-on: ubuntu-latest
    steps:

    - name: Success
      if: ${{ needs.Promote.result == 'success' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: production
        SLACK_COLOR: 'good' # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        SLACK_MESSAGE: |
          :robot_face: GitHub build result: ${{ needs.Promote.result }} :robot_face:
          :party_blob: New version - ${{ env.RELEASE }} - out for release! :party_blob:
          ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
        SLACK_TITLE: "!!! Production Update !!!"
        SLACK_USERNAME: GitHubBot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PROD }}

    - name: Fail
      if: ${{ needs.Promote.result != 'success' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: production
        SLACK_COLOR: 'danger' # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        SLACK_MESSAGE: |
          :robot_face: GitHub build result: ${{ needs.Promote.result }} :robot_face:
          :x::sos: Promotion to prudction of version - ${{ env.RELEASE }} - FAILED! :sos::x:
          ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
        SLACK_TITLE: "!!! Production Update !!!"
        SLACK_USERNAME: GitHubBot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PROD }}