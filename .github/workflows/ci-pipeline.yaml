# [Lior Dux] ==================== [ GitHub Actions CI-CD Pipelien ] ====================  [12-02-2023] #
# 
# Stages: Package, Test, Deliver, Deploy.
# 
# Notes:
# 1. Use quality actions only.
# 2. Prefer using actions to code.
# 3. Use secrets and vars where possible for dynamically and security.
# 4. TBD - decouple jobs furtur more, after figuring out how to pass files from one job to the other.
# 5. TBD - figure out how to use secret for the ECR and repo name for the build-push-docker action.
# 6. 
name: ci-pipeline

on:
  push:
    branches: ['main', 'feature/*']

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Testing
    steps:
      # Git Clone
      - name: Checkout
        uses: actions/checkout@v3
      
      # Build the image
      - name: Package
        working-directory: ./GitHub-Actions/demodocker
        run:  |
          docker build -t pipeline:current-build-test .
    
      # Unit Test Current Build
      - name: Test
        working-directory: ./GitHub-Actions/demodocker
        run: |
          docker run --name dockertest -d  pipeline:current-build-test
          echo "Assume we have unit tests to run..."
          docker stop dockertest

      # Move files between jobs
      - run: mkdir -p path/to/artifact
      - run: echo hello > path/to/artifact/world.txt
      - name: Save
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: path/to/artifact/world.txt
  
  configure:
    needs: build
    runs-on: ubuntu-latest
    environment: Testing
    steps:
      
      # Set up AWS Auth
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          # role-duration-seconds: 1200
      
      # Delivery prep
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      # Git Clone
      - name: Checkout
        uses: actions/checkout@v3
      
      # Move files between jobs - TBD
      # - name: Download
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: my-artifact
      # - name: Display structure of downloaded files
      #   run: ls -R
      #   working-directory: path/to/artifact

      # SemVer preperation, grabbing latest tag, adding minor to it.
      - name: Semver
        id: SemVer
        # if: ${{ github.Action == pull_request }}
        run: |
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo $TAG
        
      # SemVer preperation, grabbing latest tag, adding minor to it.
      - name: Semver
        env:
          TAG: ${{ steps.SemVer.output }}
        run: |
          echo $TAG

      # Delivery
      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v2
        id: build-image
        with:
          context: ./GitHub-Actions/demodocker
          push: true
          tags: 442284833462.dkr.ecr.eu-west-1.amazonaws.com/pipeline-test:0.1 
